type BalanceSync @entity(immutable: true) {
  id: Bytes!

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BaseDebtRepaid @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  realBaseDebtDelta: BigInt! # uint256
  discountedBaseDebtDelta: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ClosePosition @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  token: Bytes! # address
  collateralDelta: BigInt! # uint256
  swapPriceX96: BigInt! # uint256
  collateralDiscountedDelta: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Deleverage @entity(immutable: true) {
  id: Bytes!
  positionType: Int! # uint8
  totalCollateralReduced: BigInt! # uint256
  totalDebtReduced: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DepositBase @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  amount: BigInt! # uint256
  newPositionType: Int! # uint8
  baseDiscountedAmount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DepositQuote @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  amount: BigInt! # uint256
  newPositionType: Int! # uint8
  quoteDiscountedAmount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Emergency @entity(immutable: true) {
  id: Bytes!
  mode: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EmergencyWithdraw @entity(immutable: true) {
  id: Bytes!
  who: Bytes! # address
  token: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EnactMarginCall @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  swapPriceX96: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Long @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  amount: BigInt! # uint256
  swapPriceX96: BigInt! # uint256
  quoteDiscountedDelta: BigInt! # uint256
  baseDiscountedDelta: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ParametersChanged @entity(immutable: true) {
  id: Bytes!

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type QuoteDebtRepaid @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  realQuoteDebtDelta: BigInt! # uint256
  discountedQuoteDebtDelta: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ReceivePosition @entity(immutable: true) {
  id: Bytes!
  liquidator: Bytes! # address
  position: Bytes! # address
  newPositionType: Int! # uint8
  newPositionQuoteDiscounted: BigInt! # uint256
  newPositionBaseDiscounted: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Reinit @entity(immutable: true) {
  id: Bytes!
  reinitTimestamp: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SellBaseForQuote @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  baseDelta: BigInt! # uint256
  quoteDelta: BigInt! # uint256
  discountedBaseCollateralDelta: BigInt! # uint256
  discountedQuoteCollateralDelta: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SellQuoteForBase @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  quoteDelta: BigInt! # uint256
  baseDelta: BigInt! # uint256
  discountedQuoteCollateralDelta: BigInt! # uint256
  discountedBaseCollateralDelta: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Short @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  amount: BigInt! # uint256
  swapPriceX96: BigInt! # uint256
  quoteDiscountedDelta: BigInt! # uint256
  baseDiscountedDelta: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type WithdrawBase @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  amount: BigInt! # uint256
  baseDiscountedDelta: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type WithdrawQuote @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  amount: BigInt! # uint256
  quoteDiscountedDelta: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Token @entity(immutable: true) {
  id: ID! # token address
  symbol: String!
  name: String!
  decimals: BigInt!
}

type Pool @entity {
  id: Bytes! # pool address
  createdAtTimestamp: BigInt!
  createdAtBlockNumber: BigInt!

  baseToken: Token!
  quoteToken: Token!

  discountedBaseCollateral: BigInt!
  discountedBaseDebt: BigInt!
  discountedQuoteCollateral: BigInt!
  discountedQuoteDebt: BigInt!

  baseCollateralCoeff: BigInt!
  baseDebtCoeff: BigInt!
  quoteCollateralCoeff: BigInt!
  quoteDebtCoeff: BigInt!
  baseDelevCoeff: BigInt!
  quoteDelevCoeff: BigInt!

  shortLeverage: BigInt!
  longLeverage: BigInt!

  maxLeverage: Int!
  interestRate: Int!
  fee: Int!
  swapFee: Int!
  mcSlippage: Int!
  positionMinAmount: BigInt!
  quoteLimit: BigInt!
}

enum PositionType {
  UNINITIALIZED
  LEND
  SHORT
  LONG
}

type UserPosition @entity {
  id: Bytes! # poolAddress + user address
  pool: Bytes! # pool address
  user: Bytes! # user address
  positionType: PositionType!
  discountedBaseAmount: BigInt!
  discountedQuoteAmount: BigInt!

  baseToken: Token!
  quoteToken: Token!

  baseAmount: BigInt! #realBaseAmount on the event block
  quoteAmount: BigInt! #realBaseAmount on the event block
}

type OwnershipTransferStarted @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PoolCreated @entity(immutable: true) {
  id: Bytes!
  quoteToken: Bytes! # address
  baseToken: Bytes! # address
  priceOracle: Bytes! # address
  defaultSwapCallData: BigInt! # uint32
  pool: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SwapRouterChanged @entity(immutable: true) {
  id: Bytes!
  newSwapRouter: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
